{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 安裝所需套件與建立函數"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 安裝所需套件\n",
    "## 資料處理\n",
    "import pandas as pd\n",
    "from pandas import Series, DataFrame, concat\n",
    "import numpy as np\n",
    "from numpy import concatenate\n",
    "from numpy import array\n",
    "from math import sqrt\n",
    "from numpy.random import seed\n",
    "from datetime import datetime\n",
    "seed(1)\n",
    "\n",
    "## 繪圖\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "## 資料清洗與模型建構、訓練\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert series to supervised learning\n",
    "def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):\n",
    "    #if n_in=2, t-2,t-1,t\n",
    "    n_vars = 1 if type(data) is list else data.shape[1] #return feature numbers\n",
    "    df = DataFrame(data)\n",
    "    cols, names = list(), list()\n",
    "    # input sequence (t-n_in, ... t-1)\n",
    "    for i in range(n_in, 0, -1):\n",
    "        #print n_int to i in inverted order[n_in,n_in-1,...,1]\n",
    "        cols.append(df.shift(i))\n",
    "        names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]\n",
    "    # forecast sequence (t, t+1, ... t+n)\n",
    "    for i in range(0, n_out):\n",
    "        cols.append(df.shift(-i))\n",
    "        if i == 0:\n",
    "            names += [('var%d(t)' % (j+1)) for j in range(n_vars)]\n",
    "        else:\n",
    "            names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]\n",
    "    # put it all together\n",
    "    agg = concat(cols, axis=1)\n",
    "    agg.columns = names\n",
    "    # drop rows with NaN values\n",
    "    if dropnan:\n",
    "        agg.dropna(inplace=True)\n",
    "    return agg"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forest Classifier、SVM(SVC)、Naive Bayes Classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 設置隨機種子\n",
    "seed = 64\n",
    "np.random.seed(seed)\n",
    "\n",
    "## 資料共2016-01-04 ~ 2021-12-30\n",
    "## 將80%作為train；其他20%作為test\n",
    "# n是要用幾天前的資料當X\n",
    "n = 24\n",
    "train_percent = 0.8\n",
    "\n",
    "# 要採用的變數(x) 總共有：['Open', 'High', 'Low', 'Close', 'Volume', 'Dividends', 'Stock Splits'] # Close一定要放\n",
    "features = ['Open', 'High', 'Low', 'Close', 'Volume', 'Dividends', 'Stock Splits']\n",
    "# features = ['Open', 'High', 'Low', 'Close', 'Volume']\n",
    "# features = ['Close']\n",
    "\n",
    "\n",
    "# 是否要歸一化(True/False)\n",
    "scaled = False\n",
    "\n",
    "# Model (Random Forest Classifier ; SVC ; Naive Bayes Classification)\n",
    "Model = \"Naive Bayes Classification\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Dividends</th>\n",
       "      <th>Stock Splits</th>\n",
       "      <th>stock_id</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-01-04 00:00:00+08:00</th>\n",
       "      <td>35.393486</td>\n",
       "      <td>35.393486</td>\n",
       "      <td>34.796971</td>\n",
       "      <td>35.393486</td>\n",
       "      <td>200662336736</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05 00:00:00+08:00</th>\n",
       "      <td>35.393484</td>\n",
       "      <td>36.188774</td>\n",
       "      <td>34.995745</td>\n",
       "      <td>36.188774</td>\n",
       "      <td>402466805912</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-06 00:00:00+08:00</th>\n",
       "      <td>35.990001</td>\n",
       "      <td>36.188776</td>\n",
       "      <td>35.393486</td>\n",
       "      <td>35.393486</td>\n",
       "      <td>197545715802</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-07 00:00:00+08:00</th>\n",
       "      <td>34.200467</td>\n",
       "      <td>34.796982</td>\n",
       "      <td>33.802727</td>\n",
       "      <td>34.399242</td>\n",
       "      <td>235270344752</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-10 00:00:00+08:00</th>\n",
       "      <td>35.393484</td>\n",
       "      <td>35.791033</td>\n",
       "      <td>34.796969</td>\n",
       "      <td>35.592258</td>\n",
       "      <td>276171685539</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-03 00:00:00+08:00</th>\n",
       "      <td>540.000000</td>\n",
       "      <td>542.000000</td>\n",
       "      <td>536.000000</td>\n",
       "      <td>542.000000</td>\n",
       "      <td>31635865</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-06 00:00:00+08:00</th>\n",
       "      <td>532.000000</td>\n",
       "      <td>533.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>30870136</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-07 00:00:00+08:00</th>\n",
       "      <td>524.000000</td>\n",
       "      <td>528.000000</td>\n",
       "      <td>522.000000</td>\n",
       "      <td>523.000000</td>\n",
       "      <td>23481767</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-08 00:00:00+08:00</th>\n",
       "      <td>538.000000</td>\n",
       "      <td>540.000000</td>\n",
       "      <td>534.000000</td>\n",
       "      <td>540.000000</td>\n",
       "      <td>35096191</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-09 00:00:00+08:00</th>\n",
       "      <td>540.000000</td>\n",
       "      <td>540.000000</td>\n",
       "      <td>536.000000</td>\n",
       "      <td>540.000000</td>\n",
       "      <td>19185373</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5765 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 Open        High         Low       Close  \\\n",
       "Date                                                                        \n",
       "2000-01-04 00:00:00+08:00   35.393486   35.393486   34.796971   35.393486   \n",
       "2000-01-05 00:00:00+08:00   35.393484   36.188774   34.995745   36.188774   \n",
       "2000-01-06 00:00:00+08:00   35.990001   36.188776   35.393486   35.393486   \n",
       "2000-01-07 00:00:00+08:00   34.200467   34.796982   33.802727   34.399242   \n",
       "2000-01-10 00:00:00+08:00   35.393484   35.791033   34.796969   35.592258   \n",
       "...                               ...         ...         ...         ...   \n",
       "2023-02-03 00:00:00+08:00  540.000000  542.000000  536.000000  542.000000   \n",
       "2023-02-06 00:00:00+08:00  532.000000  533.000000  526.000000  526.000000   \n",
       "2023-02-07 00:00:00+08:00  524.000000  528.000000  522.000000  523.000000   \n",
       "2023-02-08 00:00:00+08:00  538.000000  540.000000  534.000000  540.000000   \n",
       "2023-02-09 00:00:00+08:00  540.000000  540.000000  536.000000  540.000000   \n",
       "\n",
       "                                 Volume  Dividends  Stock Splits stock_id  \n",
       "Date                                                                       \n",
       "2000-01-04 00:00:00+08:00  200662336736        0.0           0.0  2330.TW  \n",
       "2000-01-05 00:00:00+08:00  402466805912        0.0           0.0  2330.TW  \n",
       "2000-01-06 00:00:00+08:00  197545715802        0.0           0.0  2330.TW  \n",
       "2000-01-07 00:00:00+08:00  235270344752        0.0           0.0  2330.TW  \n",
       "2000-01-10 00:00:00+08:00  276171685539        0.0           0.0  2330.TW  \n",
       "...                                 ...        ...           ...      ...  \n",
       "2023-02-03 00:00:00+08:00      31635865        0.0           0.0  2330.TW  \n",
       "2023-02-06 00:00:00+08:00      30870136        0.0           0.0  2330.TW  \n",
       "2023-02-07 00:00:00+08:00      23481767        0.0           0.0  2330.TW  \n",
       "2023-02-08 00:00:00+08:00      35096191        0.0           0.0  2330.TW  \n",
       "2023-02-09 00:00:00+08:00      19185373        0.0           0.0  2330.TW  \n",
       "\n",
       "[5765 rows x 8 columns]"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "\n",
    "# 抓取股票資料 (# stock_id = '^TWII' # stock_id = '2330.TW')\n",
    "stock_id = '2330.TW'\n",
    "data = yf.Ticker(stock_id)\n",
    "df_stock = data.history(period=\"max\")\n",
    "# 增加股票代號\n",
    "df_stock['stock_id'] = stock_id\n",
    "df_stock"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Dividends</th>\n",
       "      <th>Stock Splits</th>\n",
       "      <th>Close</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-01-04 00:00:00+08:00</th>\n",
       "      <td>35.393486</td>\n",
       "      <td>35.393486</td>\n",
       "      <td>34.796971</td>\n",
       "      <td>200662336736</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.393486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05 00:00:00+08:00</th>\n",
       "      <td>35.393484</td>\n",
       "      <td>36.188774</td>\n",
       "      <td>34.995745</td>\n",
       "      <td>402466805912</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.188774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-06 00:00:00+08:00</th>\n",
       "      <td>35.990001</td>\n",
       "      <td>36.188776</td>\n",
       "      <td>35.393486</td>\n",
       "      <td>197545715802</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.393486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-07 00:00:00+08:00</th>\n",
       "      <td>34.200467</td>\n",
       "      <td>34.796982</td>\n",
       "      <td>33.802727</td>\n",
       "      <td>235270344752</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34.399242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-10 00:00:00+08:00</th>\n",
       "      <td>35.393484</td>\n",
       "      <td>35.791033</td>\n",
       "      <td>34.796969</td>\n",
       "      <td>276171685539</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.592258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-03 00:00:00+08:00</th>\n",
       "      <td>540.000000</td>\n",
       "      <td>542.000000</td>\n",
       "      <td>536.000000</td>\n",
       "      <td>31635865</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>542.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-06 00:00:00+08:00</th>\n",
       "      <td>532.000000</td>\n",
       "      <td>533.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>30870136</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>526.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-07 00:00:00+08:00</th>\n",
       "      <td>524.000000</td>\n",
       "      <td>528.000000</td>\n",
       "      <td>522.000000</td>\n",
       "      <td>23481767</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>523.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-08 00:00:00+08:00</th>\n",
       "      <td>538.000000</td>\n",
       "      <td>540.000000</td>\n",
       "      <td>534.000000</td>\n",
       "      <td>35096191</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>540.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-09 00:00:00+08:00</th>\n",
       "      <td>540.000000</td>\n",
       "      <td>540.000000</td>\n",
       "      <td>536.000000</td>\n",
       "      <td>19185373</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>540.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5658 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 Open        High         Low        Volume  \\\n",
       "Date                                                                          \n",
       "2000-01-04 00:00:00+08:00   35.393486   35.393486   34.796971  200662336736   \n",
       "2000-01-05 00:00:00+08:00   35.393484   36.188774   34.995745  402466805912   \n",
       "2000-01-06 00:00:00+08:00   35.990001   36.188776   35.393486  197545715802   \n",
       "2000-01-07 00:00:00+08:00   34.200467   34.796982   33.802727  235270344752   \n",
       "2000-01-10 00:00:00+08:00   35.393484   35.791033   34.796969  276171685539   \n",
       "...                               ...         ...         ...           ...   \n",
       "2023-02-03 00:00:00+08:00  540.000000  542.000000  536.000000      31635865   \n",
       "2023-02-06 00:00:00+08:00  532.000000  533.000000  526.000000      30870136   \n",
       "2023-02-07 00:00:00+08:00  524.000000  528.000000  522.000000      23481767   \n",
       "2023-02-08 00:00:00+08:00  538.000000  540.000000  534.000000      35096191   \n",
       "2023-02-09 00:00:00+08:00  540.000000  540.000000  536.000000      19185373   \n",
       "\n",
       "                           Dividends  Stock Splits       Close  \n",
       "Date                                                            \n",
       "2000-01-04 00:00:00+08:00        0.0           0.0   35.393486  \n",
       "2000-01-05 00:00:00+08:00        0.0           0.0   36.188774  \n",
       "2000-01-06 00:00:00+08:00        0.0           0.0   35.393486  \n",
       "2000-01-07 00:00:00+08:00        0.0           0.0   34.399242  \n",
       "2000-01-10 00:00:00+08:00        0.0           0.0   35.592258  \n",
       "...                              ...           ...         ...  \n",
       "2023-02-03 00:00:00+08:00        0.0           0.0  542.000000  \n",
       "2023-02-06 00:00:00+08:00        0.0           0.0  526.000000  \n",
       "2023-02-07 00:00:00+08:00        0.0           0.0  523.000000  \n",
       "2023-02-08 00:00:00+08:00        0.0           0.0  540.000000  \n",
       "2023-02-09 00:00:00+08:00        0.0           0.0  540.000000  \n",
       "\n",
       "[5658 rows x 7 columns]"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "# 整理資料\n",
    "\n",
    "## 將Volume=0的值移除\n",
    "filt = df_stock['Volume'] > 0\n",
    "df = df_stock.loc[filt]\n",
    "\n",
    "## 將close這個欄位放到最右邊\n",
    "cols = df.columns.tolist()                     \n",
    "cols.insert(7, cols.pop(cols.index('Close')))   \n",
    "df = df[cols] \n",
    "\n",
    "## 納入哪些變數\n",
    "drop_features = []\n",
    "for item in cols:\n",
    "    if item not in features:\n",
    "        drop_features.append(item)\n",
    "df = df.drop(drop_features, axis = 1)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    var1(t-24)  var2(t-24)  var3(t-24)    var4(t-24)  var5(t-24)  var6(t-24)  \\\n",
      "24   35.393486   35.393486   34.796970  2.006623e+11         0.0         0.0   \n",
      "25   35.393486   36.188774   34.995743  4.024668e+11         0.0         0.0   \n",
      "26   35.990002   36.188774   35.393486  1.975457e+11         0.0         0.0   \n",
      "27   34.200466   34.796982   33.802727  2.352703e+11         0.0         0.0   \n",
      "28   35.393482   35.791035   34.796970  2.761717e+11         0.0         0.0   \n",
      "\n",
      "    var7(t-24)  var1(t-23)  var2(t-23)  var3(t-23)  ...  var5(t-1)  var6(t-1)  \\\n",
      "24   35.393486   35.393486   36.188774   34.995743  ...        0.0        0.0   \n",
      "25   36.188774   35.990002   36.188774   35.393486  ...        0.0        0.0   \n",
      "26   35.393486   34.200466   34.796982   33.802727  ...        0.0        0.0   \n",
      "27   34.399242   35.393482   35.791035   34.796970  ...        0.0        0.0   \n",
      "28   35.592258   35.990013   36.387562   34.796982  ...        0.0        0.0   \n",
      "\n",
      "    var7(t-1)    var1(t)    var2(t)    var3(t)       var4(t)  var5(t)  \\\n",
      "24  43.545925  43.346947  43.346947  42.551662  1.403013e+11      0.0   \n",
      "25  42.551662  42.551651  43.148167  42.153912  1.051053e+11      0.0   \n",
      "26  42.750427  42.750439  42.949215  42.352890  7.935232e+10      0.0   \n",
      "27  42.352890  41.955147  42.352886  41.756371  1.164003e+11      0.0   \n",
      "28  41.955147  42.153923  42.551666  41.159859  1.218051e+11      0.0   \n",
      "\n",
      "    var6(t)  var7(t)  \n",
      "24      0.0        0  \n",
      "25      0.0        1  \n",
      "26      0.0        0  \n",
      "27      0.0        0  \n",
      "28      0.0        0  \n",
      "\n",
      "[5 rows x 175 columns]\n",
      "X train:(4526, 174), Y train:(4526,), X test:(1108, 174), Y test:(1108,)\n"
     ]
    }
   ],
   "source": [
    "# set train index\n",
    "n_train_index = int(train_percent*len(df))\n",
    "\n",
    "#transfer dataframe to arrays\n",
    "values = df.values\n",
    "# ensure all data is float\n",
    "values = values.astype('float32')\n",
    "\n",
    "# frame as supervised learning\n",
    "reframed = series_to_supervised(values, n, 1)\n",
    "reframed[f'var{len(features)}(t)'] = reframed[f'var{len(features)}(t)'] - reframed[f'var{len(features)}(t-1)']\n",
    "reframed[f'var{len(features)}(t)'] = reframed[f'var{len(features)}(t)'].apply(lambda x: 1 if x>0 else 0)\n",
    "print(reframed.head())\n",
    "\n",
    "if scaled == True:\n",
    "    # normalize features 歸一化到0,1之間\n",
    "    scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "    scaled = scaler.fit_transform(reframed)\n",
    "    values = scaled\n",
    "else:\n",
    "    values = np.array(reframed)\n",
    "# split into train and test sets\n",
    "# 選取所有指標的t-24到t-1作為feature，將開市的t時刻作為label，也就是reframed的最後一個\n",
    "train = values[:n_train_index, ]\n",
    "test = values[n_train_index:, ]\n",
    "# split into input and outputs\n",
    "train_X, train_y = train[:, 0:-1], train[:, -1]\n",
    "test_X, test_y = test[:, 0:-1], test[:, -1]\n",
    "print(f'X train:{train_X.shape}, Y train:{train_y.shape}, X test:{test_X.shape}, Y test:{test_y.shape}')\n",
    "# 看test_y的元素個數\n",
    "# unique, counts = np.unique(test_y, return_counts=True)\n",
    "# print(dict(zip(unique, counts)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "訓練集: 0.54\n",
      "測試集: 0.50\n",
      "-------------訓練集-------------\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQYAAAEGCAYAAACHNTs8AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATmElEQVR4nO3deXhU9b3H8fc3YQ1CWEVBVLaAqJVHFlGgsomgLNFSlrobwQt1Xx5QxFaxolfsrUXtFdDSyn5ti5RKUbEqAi0qshQxBUGEQNlNkCAk4Xf/mGmc8EtggJw5IXxez8PDzJmZc75jHt+cc2YmY845RERiJYU9gIiUPQqDiHgUBhHxKAwi4lEYRMRTIewBSpK3a4NeLjmFVG3QOewR5ATkH8qy4pZrj0FEPAqDiHgUBhHxKAwi4lEYRMSjMIiIR2EQEY/CICIehUFEPAqDiHgUBhHxKAwi4lEYRMSjMIiIR2EQEY/CICIehUFEPAqDiHgUBhHxKAwi4lEYRMSjMIiIR2EQEY/CICIehUFEPAqDiHgUBhHxKAwi4lEYRMSjMIiIR2EQEY/CICIehUFEPAqDiHgUBhHxKAwi4lEYRMSjMIiIR2EQEY/CICIehUFEPAqDiHgUBhHxKAwi4lEYRMSjMIiIR2EQEY/CICIehUFEPAqDiHgqhD1AWbdt+04eHTue3Xv3YhgD+vfmpoHpxd539dpMbrzzAZ57YhQ9u3Y+qe1m5+zjwTHj2Prv7TQ4qz7Pj32E1BrVeW/RUiZM+j1JlkRycjKj7h3GpZdcdFLbku+lpTVl+rTfFF5v0vhcfv7EeDp0aENaWlMAaqbW4JvsHNq26xnWmIEz51zYMxQrb9eGMjHYzl172Ll7D61aNGP//lwGZtzDr8eNoWnj84rcr6CggKH3jaZypYpc16dn3GFYtnwVb771Dr947MEiy59/6VVSa1TnjpsGMvn12eTs28cDIzLIzT1A1apVMDMy12/koTFP8+cZk0rt+Z6oqg1OLoRlUVJSEl9/9SlXdOrD119nFS5/7tnHyc7J4alf/CrE6UpH/qEsK255YIcSZtbSzEaa2a+jf0aa2QVBbS8o9erWplWLZgBUq5ZCk/MasX3nbu9+09+Yy1VdOlK7Vs0iy1+b9gaDMu7hupuH8+Lk1+Pe7t8WLaV/7x4A9O/dg/c+XApASkpVzCI/ywPffQdW7M9VSkH3bp3YsGFTkSgADBjQl5mz3gxpqsQIJAxmNhKYCRiwLPrHgBlmNiqIbSZC1rbtrF33JT+4sEWR5dt37mLhh0sYdN21RZYv/senfL0li5mTX+APU17i88z1fLJidVzb2r33G+rVrQ1A3Tq12L33m8Lb3v1gMX2HDGXEQ48z9tH7T/JZSUkGDuzPzFlziizr3Okytu/Yyfr1G0OaKjGCOseQAVzonMuLXWhmvwTWAM8U9yAzGwYMA3j5+ae44+YhAY13/HJzD3D/6KcYec+dnFGtWpHbnn3hFe4ffjtJSUU7u+Tj5SxZtpwBt94VWceBA2zavJW2rS9myND7OHQoj9wDB8jO2cePbvkpAA+MuJ2Ol7Upsh4zK9xLAOhxZUd6XNmRT1as5sVJv2fyC+OCeMqntYoVK9K3T09GP1b0v+2gQenMKud7CxBcGA4DDYBNRyw/O3pbsZxzE4GJUHbOMQDk5edz3+inuLZnV67q0tG7fc0X63j4Z5HW7c3OYdHSj0lOTgYHd9w0iIHp13iPmTEpcnxa0jmGOrVqsnPXHurVrc3OXXuoXTPVW0fb1hezZeu/2ftNNrWKuV1OXK9eXfnss9Xs2LGrcFlycjLXpfemfYfeIU6WGEGF4T5goZmtAzZHl50LNAPuCmibgXDO8fi4X9HkvEbcMvj6Yu+z4I0phZdHP/U8V3ZsT/cfXkGVypV5cfLr9OnZlZSUqmzfuYsKFSpQ54jzEMXp0qkDb85/lztuGsib89+la+fLAfh6y1YaNTwbM+PzzPUcOpRHzdQapfJc5XuDB6V7hxE9uncmM3M9WVnbQpoqcQIJg3Pur2aWBrQHGkYXZwEfO+cKgthmUD5btYY//3UhzZueX7i7f++dt7Bt+04A77xCrI6XtWHDps3ccOcDAKRUrcK4xx+OKwx33DSQB8c8zR/nLaDBWWfy/NhHAXjn/Y+YO38hFSpUoErlSox/clSRwww5eSkpVenR/YcMHzGyyPLIOYfyfxgBerlSSkl5fLnydJDwlytF5NSlMIiIR2EQEY/CICIehUFEPAqDiHgUBhHxKAwi4lEYRMSjMIiIR2EQEY/CICIehUFEPAqDiHgUBhHxKAwi4lEYRMSjMIiIR2EQEY/CICIehUFEPAqDiHgUBhHxKAwi4lEYRMQTVxjMrJOZ3Ra9XM/MGgc7loiE6ZhhMLOfASOBR6KLKgJTgxxKRMIVzx7DdUA/YD+Ac24rUD3IoUQkXPGE4ZCLfPOtAzCzasGOJCJhiycMs83sFaCmmQ0F3gUmBTuWiISpwrHu4Jwbb2ZXATlAC+Bx59w7gU8mIqE5ZhgAoiFQDEROE8cMg5ntI3p+AahE5FWJ/c65GkEOJiLhiedQovAVCDMzoD/QIcihRCRcx/XORxcxB7g6oHlEpAyI51Di+pirSUBb4LvAJhKR0MVz8rFvzOV84CsihxMiUk7Fc47htkQMIiJlR4lhMLMJfP9qhMc5d08gE4lI6I62x/BJwqYQkTKlxDA4536XyEFEpOyI51WJekQ+dt0KqPKf5c65bgHOJSIhiud9DNOAtUBj4Akir0p8HOBMIhKyeMJQxzn3KpDnnPvAOXc7oL0FkXIsnvcx5EX/3mZm1wJbgdrBjSQiYYsnDE+ZWSrwIDABqAHcH+hUIhKqeMLwD+dcNpANdA14HhEpA+I5x7DYzN42swwzqxX4RCISumOGwTmXBjwGXAh8ambzzOzGwCcTkdDE+xuclgHLzOxp4JfA7wj4V8jnL5od5OqllCWZhT2ClKJ4vleihpndYmbzgSXANqB94JOJSGji2WNYCcwBnnTOLQ14HhEpA+IJQ5Po90qIyGkinpOPioLIaUbfdi0iHoVBRDzxvCqRZmYLzeyf0es/MLPHgh9NRMISzx7DJOARoh+mcs6tAgYHOZSIhCueMKRE3+AUKz+IYUSkbIgnDLvMrCnRXwxrZgOIvMlJRMqpeN7H8FNgItDSzLKAjYA+KyFSjsXzvRIbgB5mVg1Ics7tC34sEQlTPL8M9vEjrgPgnHsyoJlEJGTxHErsj7lcBehD5JfDikg5Fc+hxPOx181sPLAgsIlEJHQn8s7HFOCc0h5ERMqOeM4xrOb777BMBuoBOr8gUo7Fc46hT8zlfGC7c05vcBIpx44aBjNLBhY451omaB4RKQOOeo7BOVcAZJrZuQmaR0TKgHgOJWoBa8xsGTEvXTrn+gU2lYiEKp4wjAl8ChEpU+IJwzXOuZGxC8zsWeCDYEYSkbDF8z6Gq4pZ1ru0BxGRsqPEPQYzGw6MAJqY2aqYm6oDi4MeTETCc7RDienAfGAcMCpm+T7n3J5ApxKRUJUYhphvuB6SuHFEpCzQb4kWEY/CICIehUFEPAqDiHgUBhHxKAwi4lEYRMSjMIiIR2EQEY/CICIehUFEPAqDiHgUBhHxKAwi4lEYRMSjMIiIR2EQEY/CICIehUFEPAqDiHgUBhHxKAwi4onnK+rkCP/+5lsem72IPd8eAIwftU/jhk4XntQ65366jknvrQRgaLdL6NemOQAjXnubXTm55B92XNq4Po/070ByknoepLvuyiDj9iGYGa++Np0JE15l2tSXSUtrCkBqag2ys3No1/7qkCcNjsJwApKTknjw2nZc0LAu+w/mMWTCXDo0b0jT+jWP+diMV+bz5I870bB29cJl2bkHeWXhCqbf1Q8Dhrw4ly4XnEuNlMr890+6cEaVSjjneGjq33hn9Vf0uqRJgM/u9HZhqxZk3D6EKzr24dChPObNm8pbby3khhtHFN7n2WfHkJO9L8Qpg6d/ek5AvRopXNCwLgDVKlekSb1UduTsZ/PuHEa89jZDJszltv99i407volrfUv+lUWHZg1ITalMjZTKdGjWgMX/ygLgjCqVAMg/7MgrOIwF85QkqmXLZixbtoIDB76joKCARR/+nfT0ol/VOuBHfZk1+82QJkwMheEkZe3Zxxdb93Bxo3qM/eMSRva7jBl39+OBa9rx9Jylca1jR85+zkqtVni9fmo1duTsL7w+/NUFdBs7g5TKFelx8fml/RQkxprPM+nUqT21a9ekatUq9OrVjXPOaVB4e6dOl7Fjx07Wr98Y4pTBS/ihhJnd5pz7bQm3DQOGAUz4r+vI6Nk+obMdr9yDeTw07W883Lc9SWas3LSDh6e9X3h7Xn4BAHM+Wcf0xZ8DsHl3DndPeYcKyck0rHUG/3Nz92Nu5zcZV3MwL59HZ37Isi+3cXnzhoE8H4EvvljPc+Nf5q2/TGf//lxWrlpDQUFB4e2DBvUv93sLEM45hieAYsPgnJsITAQ48KdnXCKHOl55BYd5cOp7XNO6Cd0vOp9vvztE9aqVmH1vf+++6W2bk942cjKxuHMMZ9aoxicbthVe3569n7ZNzi6yjsoVK9Cl1bm8//nXCkPApkyZyZQpMwEY++RItmRFfjbJycmk9+9Nh8uvCXO8hAjkUMLMVpXwZzVQP4htJpJzjife+IjGZ9bkps4XAZFzAQ1qncHbqzYW3idza3xfCn5FWkOWrttKTu5BcnIPsnTdVq5Ia0juwTx25uQCkF9wmEWZm2lcLzWYJyWF6tWrA0CjRg1IT+/NzJlzAOjevTOZmV+SlbXtaA8vF4LaY6gPXA3sPWK5AUsC2mbCrNi0g3mffUnzs2ox8IXIbuXdV1/KuMFX8os5S5n83kryDx/m6h80oUWD2sdcX2pKZYZ1u4QbXvozAMO6tyY1pTK79x3g3t8vJC+/gMPO0a7J2Qy4rGWgz01g1syJ1KlTi7y8fO65dzTZ2TkADPxxP2bNnhPydIlhzpX+HruZvQr81jn3UTG3TXfO/eRY6yjrhxJSVOrgF8MeQU7AoYNbin2hK5A9BudcxlFuO2YURCRcerlSRDwKg4h4FAYR8SgMIuJRGETEozCIiEdhEBGPwiAiHoVBRDwKg4h4FAYR8SgMIuJRGETEozCIiEdhEBGPwiAiHoVBRDwKg4h4FAYR8SgMIuJRGETEozCIiEdhEBGPwiAiHoVBRDwKg4h4FAYR8SgMIuJRGETEozCIiEdhEBGPwiAiHoVBRDwKg4h4FAYR8SgMIuJRGETEozCIiEdhEBGPwiAiHoVBRDwKg4h4FAYR8SgMIuJRGETEozCIiEdhEBGPwiAiHoVBRDzmnAt7htOOmQ1zzk0Mew6Jz+n489IeQziGhT2AHJfT7uelMIiIR2EQEY/CEI7T6ni1HDjtfl46+SgiHu0xiIhHYRARj8KQQGbWy8wyzWy9mY0Kex45OjN7zcx2mNk/w54l0RSGBDGzZOAloDfQChhiZq3CnUqOYQrQK+whwqAwJE57YL1zboNz7hAwE+gf8kxyFM65D4E9Yc8RBoUhcRoCm2Oub4kuEylzFAYR8SgMiZMFNIq5fk50mUiZozAkzsdAczNrbGaVgMHA3JBnEimWwpAgzrl84C5gAbAWmO2cWxPuVHI0ZjYDWAq0MLMtZpYR9kyJordEi4hHewwi4lEYRMSjMIiIR2EQEY/CICIeheE0Z2ZdzGxe9HK/o33q08xqmtmIE9jGz83soZOZszTXI8emMJRT0U9zHhfn3Fzn3DNHuUtN4LjDIKceheEUY2bnm9kXZjbNzNaa2RtmlhK97Ssze9bMlgM/NrOeZrbUzJab2f+Z2RnR+/WKrmM5cH3Mum81sxejl+ub2Z/MbGX0zxXAM0BTM1thZs9F7/ewmX1sZqvM7ImYdY02s3+Z2UdAi2KeR6qZbTKzpOj1ama22cwqmtnQ6DpXmtkf/vP8jnj8+2bWNnq5rpl9Fb2cbGbPxcx0Z+n8lz+9KAynphbAy865C4Aciv4rvts5dynwLvAY0CN6/RPgATOrAkwC+gJtgLNK2MavgQ+cc5cAlwJrgFHAl8651s65h82sJ9CcyEfKWwNtzOyHZtaGyFu+WwPXAO2OXLlzLhtYAVwZXdQHWOCcywP+6JxrF932WuB43nGYAWQ759pFtzvUzBofx+MFheFUtdk5tzh6eSrQKea2WdG/OxD5hTCLzWwFcAtwHtAS2OicW+cib3udWsI2ugG/AXDOFUT/Rz5Sz+ifz4Dl0XU3BzoDf3LO5Trncij5MyGzgEHRy4NjZr/IzBaZ2WrgBuDCEh5fnJ7AzdHn/A+gTnQmOQ4Vwh5ATsiR72OPvb4/+rcB7zjnhsTe0cxal+IcBoxzzr1yxDbui/Pxc4Gnzaw2kb2X96LLpwDpzrmVZnYr0KWYx+bz/T9sVY6Y6W7n3II4Z5BiaI/h1HSumV0evfwT4KNi7vN3oKOZNYPCY/g04AvgfDNrGr3fkGIeC7AQGB59bLKZpQL7gOox91kA3B5z7qKhmZ0JfAikm1lVM6tO5LDF45z7lsinTl8A5jnnCqI3VQe2mVlFInsMxfmKSEwABhwx0/DoYzGzNDOrVsI6pAQKw6kpE/ipma0FahHd5Y/lnNsJ3ArMMLNVRD4l2NI59x2R72L8S/Tk444StnEv0DW6O/8p0Mo5t5vIock/zew559zbwHRgafR+bwDVnXPLiRwWrATmE/mfvySzgBv5/jACYAyRw4DFREJWnPFEAvAZUDdm+WTgc2B59Je4voL2jI+bPl15ijGz84n863pRyKNIOaY9BhHxaI9BRDzaYxARj8IgIh6FQUQ8CoOIeBQGEfH8P6tJJL2LaDWmAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train accuracy: 0.5422006186478127\n",
      "report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.54      0.97      0.69      2434\n",
      "         1.0       0.56      0.05      0.09      2092\n",
      "\n",
      "    accuracy                           0.54      4526\n",
      "   macro avg       0.55      0.51      0.39      4526\n",
      "weighted avg       0.55      0.54      0.41      4526\n",
      "\n",
      "-------------測試集-------------\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy: 0.4972924187725632\n",
      "report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.50      0.86      0.63       561\n",
      "         1.0       0.47      0.13      0.20       547\n",
      "\n",
      "    accuracy                           0.50      1108\n",
      "   macro avg       0.48      0.49      0.42      1108\n",
      "weighted avg       0.48      0.50      0.42      1108\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Decision Tree\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import roc_curve, roc_auc_score, auc\n",
    "from sklearn import svm\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "np.random.seed(777)\n",
    "\n",
    "if Model == \"Random Forest Classifier\":\n",
    "    model = RandomForestClassifier()\n",
    "elif Model == \"SVC\":\n",
    "    # model = svm.SVC(kernel='rbf', gamma=0.8, C=1)\n",
    "    model = svm.SVC()\n",
    "elif Model == \"Naive Bayes Classification\":\n",
    "    model = BernoulliNB()\n",
    "\n",
    "# 使用訓練資料訓練模型\n",
    "model.fit(train_X, train_y)\n",
    "# 訓練資料的預測\n",
    "yhat_train = model.predict(train_X)\n",
    "\n",
    "# 測試資料的績效\n",
    "yhat_test = model.predict(test_X)\n",
    "\n",
    "# 預測成功的比例\n",
    "print('訓練集: %0.2f' %model.score(train_X,train_y))\n",
    "print('測試集: %0.2f' %model.score(test_X,test_y))\n",
    "\n",
    "# 建立資料夾存結果圖\n",
    "import os\n",
    "path = f'./{stock_id}_{Model}'\n",
    "if not os.path.isdir(path):\n",
    "    os.mkdir(path)\n",
    "\n",
    "print('-------------訓練集-------------')\n",
    "# Confusion matrix\n",
    "mat = confusion_matrix(train_y, yhat_train)\n",
    "sns.heatmap(mat,square= True, annot=True, cbar= False)\n",
    "plt.xlabel(\"predicted value\")\n",
    "plt.ylabel(\"true value\")\n",
    "plt.savefig(f'./{stock_id}_{Model}/confusion_matrix_train_{features}_Scaled{scaled}.png')\n",
    "plt.show()\n",
    "\n",
    "# Accuracy\n",
    "accuracy = metrics.accuracy_score(train_y, yhat_train)\n",
    "print('Train accuracy:', accuracy)\n",
    "\n",
    "# precision, recall, f1-score\n",
    "print(\"report:\\n\",classification_report(train_y, yhat_train))\n",
    "\n",
    "print('-------------測試集-------------')\n",
    "# Confusion matrix\n",
    "mat = confusion_matrix(test_y, yhat_test)\n",
    "sns.heatmap(mat,square= True, annot=True, cbar= False)\n",
    "plt.xlabel(\"predicted value\")\n",
    "plt.ylabel(\"true value\")\n",
    "plt.savefig(f'./{stock_id}_{Model}/confusion_matrix_test_{features}_Scaled{scaled}.png')\n",
    "plt.show()\n",
    "\n",
    "# Accuracy\n",
    "accuracy = metrics.accuracy_score(test_y, yhat_test)\n",
    "print('Test accuracy:', accuracy)\n",
    "\n",
    "# precision, recall, f1-score\n",
    "print(\"report:\\n\",classification_report(test_y, yhat_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 輸出Excel\n",
    "train_period = df.index[n:n_train_index+n]\n",
    "train_df = DataFrame({'True':train_y}).set_index(train_period)\n",
    "train_df['Predict'] = yhat_train\n",
    "train_df['Dataset'] = 'Train'\n",
    "\n",
    "test_period = df.index[n_train_index+n:]\n",
    "test_df = DataFrame({'True':test_y}).set_index(test_period)\n",
    "test_df['Predict'] = yhat_test\n",
    "test_df['Dataset'] = 'Test'\n",
    "result_df = concat([train_df,test_df])\n",
    "result_df.to_excel(f'./{stock_id}_{Model}/result_{features}_scale{scaled}.xlsx', index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import LSTM\n",
    "from keras.layers import Bidirectional\n",
    "from keras.layers import Dropout\n",
    "from keras import regularizers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 要抓的資料\n",
    "stock_id = '2330.TW'\n",
    "# stock_id = '^TWII'\n",
    "\n",
    "\n",
    "## 將80%作為train；15%作為valid (約1年)；5%作為test (約1年)\n",
    "n = 24\n",
    "train_percent = 0.8\n",
    "valid_percent = 0.15\n",
    "# 要採用的變數(x) 總共有：['Open', 'High', 'Low', 'Close', 'Volume', 'Dividends', 'Stock Splits'] # Close一定要放\n",
    "# features = ['Open', 'High', 'Low', 'Close', 'Volume', 'Dividends', 'Stock Splits']\n",
    "features = ['Close']\n",
    "\n",
    "\n",
    "# Select model type\n",
    "# 1: Single cell\n",
    "# 2: Stacked\n",
    "# 3: Bidirectional\n",
    "# 4: 一層LSTM，以及正則化(L1, L2 and Dropout regularisation)以避免overfit \n",
    "model_type = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Dividends</th>\n",
       "      <th>Stock Splits</th>\n",
       "      <th>stock_id</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-01-04 00:00:00+08:00</th>\n",
       "      <td>35.393501</td>\n",
       "      <td>35.393501</td>\n",
       "      <td>34.796986</td>\n",
       "      <td>35.393501</td>\n",
       "      <td>200662336736</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05 00:00:00+08:00</th>\n",
       "      <td>35.393496</td>\n",
       "      <td>36.188786</td>\n",
       "      <td>34.995756</td>\n",
       "      <td>36.188786</td>\n",
       "      <td>402466805912</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-06 00:00:00+08:00</th>\n",
       "      <td>35.990016</td>\n",
       "      <td>36.188791</td>\n",
       "      <td>35.393501</td>\n",
       "      <td>35.393501</td>\n",
       "      <td>197545715802</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-07 00:00:00+08:00</th>\n",
       "      <td>34.200464</td>\n",
       "      <td>34.796979</td>\n",
       "      <td>33.802724</td>\n",
       "      <td>34.399239</td>\n",
       "      <td>235270344752</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-10 00:00:00+08:00</th>\n",
       "      <td>35.393484</td>\n",
       "      <td>35.791033</td>\n",
       "      <td>34.796969</td>\n",
       "      <td>35.592258</td>\n",
       "      <td>276171685539</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-06 00:00:00+08:00</th>\n",
       "      <td>532.000000</td>\n",
       "      <td>533.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>30870136</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-07 00:00:00+08:00</th>\n",
       "      <td>524.000000</td>\n",
       "      <td>528.000000</td>\n",
       "      <td>522.000000</td>\n",
       "      <td>523.000000</td>\n",
       "      <td>23481767</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-08 00:00:00+08:00</th>\n",
       "      <td>538.000000</td>\n",
       "      <td>540.000000</td>\n",
       "      <td>534.000000</td>\n",
       "      <td>540.000000</td>\n",
       "      <td>35096191</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-09 00:00:00+08:00</th>\n",
       "      <td>540.000000</td>\n",
       "      <td>540.000000</td>\n",
       "      <td>536.000000</td>\n",
       "      <td>540.000000</td>\n",
       "      <td>18861972</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-10 00:00:00+08:00</th>\n",
       "      <td>544.000000</td>\n",
       "      <td>546.000000</td>\n",
       "      <td>541.000000</td>\n",
       "      <td>545.000000</td>\n",
       "      <td>28495684</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2330.TW</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5766 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 Open        High         Low       Close  \\\n",
       "Date                                                                        \n",
       "2000-01-04 00:00:00+08:00   35.393501   35.393501   34.796986   35.393501   \n",
       "2000-01-05 00:00:00+08:00   35.393496   36.188786   34.995756   36.188786   \n",
       "2000-01-06 00:00:00+08:00   35.990016   36.188791   35.393501   35.393501   \n",
       "2000-01-07 00:00:00+08:00   34.200464   34.796979   33.802724   34.399239   \n",
       "2000-01-10 00:00:00+08:00   35.393484   35.791033   34.796969   35.592258   \n",
       "...                               ...         ...         ...         ...   \n",
       "2023-02-06 00:00:00+08:00  532.000000  533.000000  526.000000  526.000000   \n",
       "2023-02-07 00:00:00+08:00  524.000000  528.000000  522.000000  523.000000   \n",
       "2023-02-08 00:00:00+08:00  538.000000  540.000000  534.000000  540.000000   \n",
       "2023-02-09 00:00:00+08:00  540.000000  540.000000  536.000000  540.000000   \n",
       "2023-02-10 00:00:00+08:00  544.000000  546.000000  541.000000  545.000000   \n",
       "\n",
       "                                 Volume  Dividends  Stock Splits stock_id  \n",
       "Date                                                                       \n",
       "2000-01-04 00:00:00+08:00  200662336736        0.0           0.0  2330.TW  \n",
       "2000-01-05 00:00:00+08:00  402466805912        0.0           0.0  2330.TW  \n",
       "2000-01-06 00:00:00+08:00  197545715802        0.0           0.0  2330.TW  \n",
       "2000-01-07 00:00:00+08:00  235270344752        0.0           0.0  2330.TW  \n",
       "2000-01-10 00:00:00+08:00  276171685539        0.0           0.0  2330.TW  \n",
       "...                                 ...        ...           ...      ...  \n",
       "2023-02-06 00:00:00+08:00      30870136        0.0           0.0  2330.TW  \n",
       "2023-02-07 00:00:00+08:00      23481767        0.0           0.0  2330.TW  \n",
       "2023-02-08 00:00:00+08:00      35096191        0.0           0.0  2330.TW  \n",
       "2023-02-09 00:00:00+08:00      18861972        0.0           0.0  2330.TW  \n",
       "2023-02-10 00:00:00+08:00      28495684        0.0           0.0  2330.TW  \n",
       "\n",
       "[5766 rows x 8 columns]"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "\n",
    "# 抓取股票資料\n",
    "data = yf.Ticker(stock_id)\n",
    "df = data.history(period=\"max\")\n",
    "# 增加股票代號\n",
    "df['stock_id'] = stock_id\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-01-04 00:00:00+08:00</th>\n",
       "      <td>35.393486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05 00:00:00+08:00</th>\n",
       "      <td>36.188774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-06 00:00:00+08:00</th>\n",
       "      <td>35.393486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-07 00:00:00+08:00</th>\n",
       "      <td>34.399242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-10 00:00:00+08:00</th>\n",
       "      <td>35.592258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-03 00:00:00+08:00</th>\n",
       "      <td>542.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-06 00:00:00+08:00</th>\n",
       "      <td>526.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-07 00:00:00+08:00</th>\n",
       "      <td>523.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-08 00:00:00+08:00</th>\n",
       "      <td>540.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-09 00:00:00+08:00</th>\n",
       "      <td>540.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5658 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Close\n",
       "Date                                 \n",
       "2000-01-04 00:00:00+08:00   35.393486\n",
       "2000-01-05 00:00:00+08:00   36.188774\n",
       "2000-01-06 00:00:00+08:00   35.393486\n",
       "2000-01-07 00:00:00+08:00   34.399242\n",
       "2000-01-10 00:00:00+08:00   35.592258\n",
       "...                               ...\n",
       "2023-02-03 00:00:00+08:00  542.000000\n",
       "2023-02-06 00:00:00+08:00  526.000000\n",
       "2023-02-07 00:00:00+08:00  523.000000\n",
       "2023-02-08 00:00:00+08:00  540.000000\n",
       "2023-02-09 00:00:00+08:00  540.000000\n",
       "\n",
       "[5658 rows x 1 columns]"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "# 整理資料\n",
    "\n",
    "## 將Volume=0的值移除\n",
    "filt = df_stock['Volume'] > 0\n",
    "df = df_stock.loc[filt]\n",
    "\n",
    "## 將close這個欄位放到最右邊\n",
    "cols = df.columns.tolist()                     \n",
    "cols.insert(7, cols.pop(cols.index('Close')))   \n",
    "df = df[cols] \n",
    "\n",
    "## 納入哪些變數\n",
    "drop_features = []\n",
    "for item in cols:\n",
    "    if item not in features:\n",
    "        drop_features.append(item)\n",
    "df = df.drop(drop_features, axis = 1)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    var1(t-24)  var1(t-23)  var1(t-22)  var1(t-21)  var1(t-20)  var1(t-19)  \\\n",
      "24   35.393486   36.188774   35.393486   34.399242   35.592258   34.995758   \n",
      "25   36.188774   35.393486   34.399242   35.592258   34.995758   35.990002   \n",
      "26   35.393486   34.399242   35.592258   34.995758   35.990002   35.393486   \n",
      "27   34.399242   35.592258   34.995758   35.990002   35.393486   36.188774   \n",
      "28   35.592258   34.995758   35.990002   35.393486   36.188774   37.183033   \n",
      "\n",
      "    var1(t-18)  var1(t-17)  var1(t-16)  var1(t-15)  ...  var1(t-9)  var1(t-8)  \\\n",
      "24   35.990002   35.393486   36.188774   37.183033  ...  38.376064  40.960892   \n",
      "25   35.393486   36.188774   37.183033   36.586521  ...  40.960892  41.358635   \n",
      "26   36.188774   37.183033   36.586521   36.586521  ...  41.358635  40.563351   \n",
      "27   37.183033   36.586521   36.586521   36.188774  ...  40.563351  40.364376   \n",
      "28   36.586521   36.586521   36.188774   36.984066  ...  40.364376  40.165604   \n",
      "\n",
      "    var1(t-7)  var1(t-6)  var1(t-5)  var1(t-4)  var1(t-3)  var1(t-2)  \\\n",
      "24  41.358635  40.563351  40.364376  40.165604  41.955147  42.551662   \n",
      "25  40.563351  40.364376  40.165604  41.955147  42.551662  43.545925   \n",
      "26  40.364376  40.165604  41.955147  42.551662  43.545925  42.551662   \n",
      "27  40.165604  41.955147  42.551662  43.545925  42.551662  42.750427   \n",
      "28  41.955147  42.551662  43.545925  42.551662  42.750427  42.352890   \n",
      "\n",
      "    var1(t-1)  var1(t)  \n",
      "24  43.545925        0  \n",
      "25  42.551662        1  \n",
      "26  42.750427        0  \n",
      "27  42.352890        0  \n",
      "28  41.955147        0  \n",
      "\n",
      "[5 rows x 25 columns]\n",
      "    var1(t-24)  var1(t-23)  var1(t-22)  var1(t-21)  var1(t-20)  var1(t-19)  \\\n",
      "24   35.393486   36.188774   35.393486   34.399242   35.592258   34.995758   \n",
      "25   36.188774   35.393486   34.399242   35.592258   34.995758   35.990002   \n",
      "26   35.393486   34.399242   35.592258   34.995758   35.990002   35.393486   \n",
      "27   34.399242   35.592258   34.995758   35.990002   35.393486   36.188774   \n",
      "28   35.592258   34.995758   35.990002   35.393486   36.188774   37.183033   \n",
      "\n",
      "    var1(t-18)  var1(t-17)  var1(t-16)  var1(t-15)  ...  var1(t-9)  var1(t-8)  \\\n",
      "24   35.990002   35.393486   36.188774   37.183033  ...  38.376064  40.960892   \n",
      "25   35.393486   36.188774   37.183033   36.586521  ...  40.960892  41.358635   \n",
      "26   36.188774   37.183033   36.586521   36.586521  ...  41.358635  40.563351   \n",
      "27   37.183033   36.586521   36.586521   36.188774  ...  40.563351  40.364376   \n",
      "28   36.586521   36.586521   36.188774   36.984066  ...  40.364376  40.165604   \n",
      "\n",
      "    var1(t-7)  var1(t-6)  var1(t-5)  var1(t-4)  var1(t-3)  var1(t-2)  \\\n",
      "24  41.358635  40.563351  40.364376  40.165604  41.955147  42.551662   \n",
      "25  40.563351  40.364376  40.165604  41.955147  42.551662  43.545925   \n",
      "26  40.364376  40.165604  41.955147  42.551662  43.545925  42.551662   \n",
      "27  40.165604  41.955147  42.551662  43.545925  42.551662  42.750427   \n",
      "28  41.955147  42.551662  43.545925  42.551662  42.750427  42.352890   \n",
      "\n",
      "    var1(t-1)  var1(t)  \n",
      "24  43.545925        0  \n",
      "25  42.551662        1  \n",
      "26  42.750427        0  \n",
      "27  42.352890        0  \n",
      "28  41.955147        0  \n",
      "\n",
      "[5 rows x 25 columns]\n"
     ]
    }
   ],
   "source": [
    "#transfer dataframe to arrays\n",
    "values = df.values\n",
    "# ensure all data is float\n",
    "values = values.astype('float32')\n",
    "\n",
    "# frame as supervised learning\n",
    "reframed = series_to_supervised(values, n, 1)\n",
    "reframed[f'var{len(features)}(t)'] = reframed[f'var{len(features)}(t)'] - reframed[f'var{len(features)}(t-1)']\n",
    "reframed[f'var{len(features)}(t)'] = reframed[f'var{len(features)}(t)'].apply(lambda x: 1 if x>0 else 0)\n",
    "print(reframed.head())\n",
    "\n",
    "# normalize features 歸一化到0,1之間\n",
    "scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "scaled = scaler.fit_transform(reframed)\n",
    "\n",
    "print(reframed.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Y</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2995</td>\n",
       "      <td>0.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2639</td>\n",
       "      <td>0.47</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Y  Percent\n",
       "0  2995     0.53\n",
       "1  2639     0.47"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count_value = pd.DataFrame(reframed['var1(t)'].value_counts())\n",
    "count_value.rename(\n",
    "    columns={\"var1(t)\": \"Y\"},\n",
    "    inplace=True,\n",
    ")\n",
    "count_value_sum = sum(count_value['Y'])\n",
    "count_value['Percent'] = round((count_value['Y']/count_value_sum),2)\n",
    "count_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X train:(4526, 1, 24), Y train:(4526,), X valid:(849, 1, 24), Y valid:(849,), X test:(259, 1, 24), Y test:(259,)\n"
     ]
    }
   ],
   "source": [
    "# split into train and test sets\n",
    "n_train_index = int(train_percent*len(df))\n",
    "n_valid_index = int((train_percent+valid_percent)*len(df))\n",
    "\n",
    "\n",
    "values = scaled\n",
    "\n",
    "# 選取所有指標的t-24到t-1作為feature，將開市的t時刻作為label，也就是reframed的最後一個\n",
    "train = values[:n_train_index, ]\n",
    "valid = values[n_train_index:n_valid_index, ]\n",
    "test = values[n_valid_index:, ]\n",
    "# split into input and outputs\n",
    "train_X, train_y = train[:, 0:-1], train[:, -1]\n",
    "valid_X, valid_y = valid[:, 0:-1], valid[:, -1]\n",
    "test_X, test_y = test[:, 0:-1], test[:, -1]\n",
    "# reshape input to be 3D [samples, timesteps, features]\n",
    "# 將每一行切割開，每一行作為一個輸入樣本，所以每個樣本有時間上的延遲關聯性。\n",
    "train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))\n",
    "valid_X = valid_X.reshape((valid_X.shape[0], 1, valid_X.shape[1]))\n",
    "test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))\n",
    "print(f'X train:{train_X.shape}, Y train:{train_y.shape}, X valid:{valid_X.shape}, Y valid:{valid_y.shape}, X test:{test_X.shape}, Y test:{test_y.shape}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "if model_type == 1:\n",
    "    # Single cell LSTM\n",
    "    model = Sequential()\n",
    "    model.add(LSTM(10,input_shape=(train_X.shape[1], train_X.shape[2])))\n",
    "    model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "if model_type == 2:\n",
    "    # Stacked LSTM\n",
    "    model = Sequential()\n",
    "    model.add(LSTM(10, activation='relu', return_sequences=True, input_shape=(train_X.shape[1], train_X.shape[2])))\n",
    "    model.add(LSTM(10, activation='relu'))\n",
    "    model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "if model_type == 3:\n",
    "    # Bidirectional LSTM\n",
    "    model = Sequential()\n",
    "    model.add(Bidirectional(LSTM(200, activation='relu', return_sequences=True), input_shape=(train_X.shape[1], train_X.shape[2])))\n",
    "    model.add(Dense(20, activation='tanh'))\n",
    "    model.add(Dropout(0.25))         \n",
    "    model.add(Dense(1, activation='sigmoid'))\n",
    "    \n",
    "if model_type == 4:\n",
    "    # 一層LSTM，以及正則化(L1, L2 and Dropout regularisation)以避免overfit \n",
    "    model.add(LSTM(10,input_shape=(train_X.shape[1], train_X.shape[2]),\n",
    "                   kernel_regularizer=regularizers.l2(0.001),activity_regularizer=regularizers.l1(0.001)))\n",
    "    model.add(Dropout(0.2))\n",
    "    ## 增加 output layer，激勵函數用sigmoid\n",
    "    model.add(Dense(1, activation = 'sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 建立LSTM資料夾\n",
    "import os\n",
    "path = f'./{stock_id}_LSTM(classification)'\n",
    "if not os.path.isdir(path):\n",
    "    os.mkdir(path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm_3 (LSTM)               (None, 10)                1400      \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 1)                 11        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 1,411\n",
      "Trainable params: 1,411\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n",
      "Epoch 1/100\n",
      "4526/4526 - 5s - loss: 0.6909 - val_loss: 0.6977 - 5s/epoch - 1ms/step\n",
      "Epoch 2/100\n",
      "4526/4526 - 4s - loss: 0.6907 - val_loss: 0.6956 - 4s/epoch - 883us/step\n",
      "Epoch 3/100\n",
      "4526/4526 - 4s - loss: 0.6903 - val_loss: 0.6950 - 4s/epoch - 836us/step\n",
      "Epoch 4/100\n",
      "4526/4526 - 4s - loss: 0.6902 - val_loss: 0.6948 - 4s/epoch - 886us/step\n",
      "Epoch 5/100\n",
      "4526/4526 - 4s - loss: 0.6901 - val_loss: 0.6947 - 4s/epoch - 863us/step\n",
      "Epoch 6/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6946 - 4s/epoch - 828us/step\n",
      "Epoch 7/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6946 - 4s/epoch - 879us/step\n",
      "Epoch 8/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6947 - 4s/epoch - 845us/step\n",
      "Epoch 9/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6949 - 4s/epoch - 828us/step\n",
      "Epoch 10/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6952 - 4s/epoch - 825us/step\n",
      "Epoch 11/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6956 - 4s/epoch - 827us/step\n",
      "Epoch 12/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6960 - 4s/epoch - 827us/step\n",
      "Epoch 13/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6963 - 4s/epoch - 827us/step\n",
      "Epoch 14/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6966 - 4s/epoch - 830us/step\n",
      "Epoch 15/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6968 - 4s/epoch - 828us/step\n",
      "Epoch 16/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6969 - 4s/epoch - 832us/step\n",
      "Epoch 17/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6970 - 4s/epoch - 830us/step\n",
      "Epoch 18/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6970 - 4s/epoch - 827us/step\n",
      "Epoch 19/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6970 - 4s/epoch - 825us/step\n",
      "Epoch 20/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6969 - 4s/epoch - 825us/step\n",
      "Epoch 21/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6968 - 4s/epoch - 826us/step\n",
      "Epoch 22/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6967 - 4s/epoch - 833us/step\n",
      "Epoch 23/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6966 - 4s/epoch - 829us/step\n",
      "Epoch 24/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6965 - 4s/epoch - 826us/step\n",
      "Epoch 25/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6963 - 4s/epoch - 828us/step\n",
      "Epoch 26/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6962 - 4s/epoch - 826us/step\n",
      "Epoch 27/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6961 - 4s/epoch - 825us/step\n",
      "Epoch 28/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6959 - 4s/epoch - 828us/step\n",
      "Epoch 29/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6958 - 4s/epoch - 825us/step\n",
      "Epoch 30/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6957 - 4s/epoch - 826us/step\n",
      "Epoch 31/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6956 - 4s/epoch - 829us/step\n",
      "Epoch 32/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6955 - 4s/epoch - 826us/step\n",
      "Epoch 33/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6954 - 4s/epoch - 831us/step\n",
      "Epoch 34/100\n",
      "4526/4526 - 4s - loss: 0.6900 - val_loss: 0.6953 - 4s/epoch - 837us/step\n",
      "Epoch 35/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6952 - 4s/epoch - 828us/step\n",
      "Epoch 36/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6951 - 4s/epoch - 828us/step\n",
      "Epoch 37/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6950 - 4s/epoch - 827us/step\n",
      "Epoch 38/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6950 - 4s/epoch - 828us/step\n",
      "Epoch 39/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6949 - 4s/epoch - 826us/step\n",
      "Epoch 40/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6949 - 4s/epoch - 826us/step\n",
      "Epoch 41/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6948 - 4s/epoch - 827us/step\n",
      "Epoch 42/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6948 - 4s/epoch - 826us/step\n",
      "Epoch 43/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6948 - 4s/epoch - 824us/step\n",
      "Epoch 44/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6948 - 4s/epoch - 825us/step\n",
      "Epoch 45/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6947 - 4s/epoch - 824us/step\n",
      "Epoch 46/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6947 - 4s/epoch - 826us/step\n",
      "Epoch 47/100\n",
      "4526/4526 - 4s - loss: 0.6899 - val_loss: 0.6947 - 4s/epoch - 826us/step\n",
      "Epoch 48/100\n",
      "4526/4526 - 4s - loss: 0.6898 - val_loss: 0.6947 - 4s/epoch - 830us/step\n",
      "Epoch 49/100\n",
      "4526/4526 - 4s - loss: 0.6898 - val_loss: 0.6947 - 4s/epoch - 831us/step\n",
      "Epoch 50/100\n",
      "4526/4526 - 4s - loss: 0.6898 - val_loss: 0.6947 - 4s/epoch - 826us/step\n",
      "Epoch 51/100\n",
      "4526/4526 - 4s - loss: 0.6898 - val_loss: 0.6947 - 4s/epoch - 824us/step\n",
      "Epoch 52/100\n",
      "4526/4526 - 4s - loss: 0.6898 - val_loss: 0.6947 - 4s/epoch - 825us/step\n",
      "Epoch 53/100\n",
      "4526/4526 - 4s - loss: 0.6898 - val_loss: 0.6948 - 4s/epoch - 824us/step\n",
      "Epoch 54/100\n",
      "4526/4526 - 4s - loss: 0.6898 - val_loss: 0.6948 - 4s/epoch - 823us/step\n",
      "Epoch 55/100\n",
      "4526/4526 - 4s - loss: 0.6898 - val_loss: 0.6948 - 4s/epoch - 827us/step\n",
      "Epoch 56/100\n",
      "4526/4526 - 4s - loss: 0.6898 - val_loss: 0.6948 - 4s/epoch - 822us/step\n",
      "Epoch 57/100\n",
      "4526/4526 - 4s - loss: 0.6897 - val_loss: 0.6948 - 4s/epoch - 827us/step\n",
      "Epoch 58/100\n",
      "4526/4526 - 4s - loss: 0.6897 - val_loss: 0.6948 - 4s/epoch - 829us/step\n",
      "Epoch 59/100\n",
      "4526/4526 - 4s - loss: 0.6897 - val_loss: 0.6948 - 4s/epoch - 825us/step\n",
      "Epoch 60/100\n",
      "4526/4526 - 4s - loss: 0.6897 - val_loss: 0.6949 - 4s/epoch - 825us/step\n",
      "Epoch 61/100\n",
      "4526/4526 - 4s - loss: 0.6897 - val_loss: 0.6949 - 4s/epoch - 824us/step\n",
      "Epoch 62/100\n",
      "4526/4526 - 4s - loss: 0.6897 - val_loss: 0.6949 - 4s/epoch - 994us/step\n",
      "Epoch 63/100\n",
      "4526/4526 - 4s - loss: 0.6897 - val_loss: 0.6949 - 4s/epoch - 859us/step\n",
      "Epoch 64/100\n",
      "4526/4526 - 4s - loss: 0.6897 - val_loss: 0.6949 - 4s/epoch - 826us/step\n",
      "Epoch 65/100\n",
      "4526/4526 - 4s - loss: 0.6897 - val_loss: 0.6949 - 4s/epoch - 826us/step\n",
      "Epoch 66/100\n",
      "4526/4526 - 4s - loss: 0.6896 - val_loss: 0.6950 - 4s/epoch - 826us/step\n",
      "Epoch 67/100\n",
      "4526/4526 - 4s - loss: 0.6896 - val_loss: 0.6950 - 4s/epoch - 824us/step\n",
      "Epoch 68/100\n",
      "4526/4526 - 4s - loss: 0.6896 - val_loss: 0.6950 - 4s/epoch - 827us/step\n",
      "Epoch 69/100\n",
      "4526/4526 - 4s - loss: 0.6896 - val_loss: 0.6950 - 4s/epoch - 823us/step\n",
      "Epoch 70/100\n",
      "4526/4526 - 4s - loss: 0.6896 - val_loss: 0.6950 - 4s/epoch - 825us/step\n",
      "Epoch 71/100\n",
      "4526/4526 - 4s - loss: 0.6896 - val_loss: 0.6951 - 4s/epoch - 825us/step\n",
      "Epoch 72/100\n",
      "4526/4526 - 4s - loss: 0.6896 - val_loss: 0.6951 - 4s/epoch - 824us/step\n",
      "Epoch 73/100\n",
      "4526/4526 - 4s - loss: 0.6895 - val_loss: 0.6951 - 4s/epoch - 827us/step\n",
      "Epoch 74/100\n",
      "4526/4526 - 4s - loss: 0.6895 - val_loss: 0.6951 - 4s/epoch - 826us/step\n",
      "Epoch 75/100\n",
      "4526/4526 - 4s - loss: 0.6895 - val_loss: 0.6952 - 4s/epoch - 827us/step\n",
      "Epoch 76/100\n",
      "4526/4526 - 4s - loss: 0.6895 - val_loss: 0.6952 - 4s/epoch - 826us/step\n",
      "Epoch 77/100\n",
      "4526/4526 - 4s - loss: 0.6895 - val_loss: 0.6952 - 4s/epoch - 824us/step\n",
      "Epoch 78/100\n",
      "4526/4526 - 4s - loss: 0.6895 - val_loss: 0.6952 - 4s/epoch - 827us/step\n",
      "Epoch 79/100\n",
      "4526/4526 - 4s - loss: 0.6895 - val_loss: 0.6953 - 4s/epoch - 836us/step\n",
      "Epoch 80/100\n",
      "4526/4526 - 4s - loss: 0.6895 - val_loss: 0.6953 - 4s/epoch - 830us/step\n",
      "Epoch 81/100\n",
      "4526/4526 - 4s - loss: 0.6894 - val_loss: 0.6953 - 4s/epoch - 833us/step\n",
      "Epoch 82/100\n",
      "4526/4526 - 4s - loss: 0.6894 - val_loss: 0.6954 - 4s/epoch - 828us/step\n",
      "Epoch 83/100\n",
      "4526/4526 - 4s - loss: 0.6894 - val_loss: 0.6954 - 4s/epoch - 825us/step\n",
      "Epoch 84/100\n",
      "4526/4526 - 4s - loss: 0.6894 - val_loss: 0.6955 - 4s/epoch - 833us/step\n",
      "Epoch 85/100\n",
      "4526/4526 - 4s - loss: 0.6894 - val_loss: 0.6955 - 4s/epoch - 824us/step\n",
      "Epoch 86/100\n",
      "4526/4526 - 4s - loss: 0.6894 - val_loss: 0.6956 - 4s/epoch - 823us/step\n",
      "Epoch 87/100\n",
      "4526/4526 - 4s - loss: 0.6894 - val_loss: 0.6956 - 4s/epoch - 825us/step\n",
      "Epoch 88/100\n",
      "4526/4526 - 4s - loss: 0.6894 - val_loss: 0.6957 - 4s/epoch - 826us/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 89/100\n",
      "4526/4526 - 4s - loss: 0.6893 - val_loss: 0.6957 - 4s/epoch - 825us/step\n",
      "Epoch 90/100\n",
      "4526/4526 - 4s - loss: 0.6893 - val_loss: 0.6958 - 4s/epoch - 822us/step\n",
      "Epoch 91/100\n",
      "4526/4526 - 4s - loss: 0.6893 - val_loss: 0.6958 - 4s/epoch - 823us/step\n",
      "Epoch 92/100\n",
      "4526/4526 - 4s - loss: 0.6893 - val_loss: 0.6959 - 4s/epoch - 823us/step\n",
      "Epoch 93/100\n",
      "4526/4526 - 4s - loss: 0.6893 - val_loss: 0.6960 - 4s/epoch - 823us/step\n",
      "Epoch 94/100\n",
      "4526/4526 - 4s - loss: 0.6893 - val_loss: 0.6960 - 4s/epoch - 823us/step\n",
      "Epoch 95/100\n",
      "4526/4526 - 4s - loss: 0.6893 - val_loss: 0.6961 - 4s/epoch - 832us/step\n",
      "Epoch 96/100\n",
      "4526/4526 - 4s - loss: 0.6893 - val_loss: 0.6962 - 4s/epoch - 825us/step\n",
      "Epoch 97/100\n",
      "4526/4526 - 4s - loss: 0.6893 - val_loss: 0.6963 - 4s/epoch - 825us/step\n",
      "Epoch 98/100\n",
      "4526/4526 - 4s - loss: 0.6892 - val_loss: 0.6963 - 4s/epoch - 823us/step\n",
      "Epoch 99/100\n",
      "4526/4526 - 4s - loss: 0.6892 - val_loss: 0.6964 - 4s/epoch - 824us/step\n",
      "Epoch 100/100\n",
      "4526/4526 - 4s - loss: 0.6892 - val_loss: 0.6965 - 4s/epoch - 825us/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fd750ac8460>"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 建構模型\n",
    "## Model compiling\n",
    "model.compile(optimizer = 'adam', loss = 'binary_crossentropy')\n",
    "# model.compile(loss='mae')\n",
    "print(model.summary())\n",
    "\n",
    "# 開始訓練\n",
    "history = model.fit(train_X, train_y, epochs=100, batch_size=1, validation_data=(valid_X, valid_y), verbose=2, shuffle=False)\n",
    "\n",
    "# loss/epoch\n",
    "loss = history.history['loss']\n",
    "epochs = range(len(loss))\n",
    "\n",
    "# 視覺化訓練軌跡\n",
    "plt.plot(history.history['loss'], label='train')\n",
    "plt.plot(history.history['val_loss'], label='validation')\n",
    "plt.savefig(f'./{stock_id}_LSTM/features_{features}_type{model_type}.png')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------訓練集-------------\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train accuracy: 0.506186478126381\n",
      "report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.53      0.73      0.62      2434\n",
      "         1.0       0.44      0.24      0.31      2092\n",
      "\n",
      "    accuracy                           0.51      4526\n",
      "   macro avg       0.48      0.49      0.46      4526\n",
      "weighted avg       0.49      0.51      0.47      4526\n",
      "\n",
      "-------------驗證集-------------\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation accuracy: 0.49469964664310956\n",
      "report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.49      1.00      0.66       420\n",
      "         1.0       0.00      0.00      0.00       429\n",
      "\n",
      "    accuracy                           0.49       849\n",
      "   macro avg       0.25      0.50      0.33       849\n",
      "weighted avg       0.24      0.49      0.33       849\n",
      "\n",
      "-------------測試集-------------\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy: 0.5444015444015444\n",
      "report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.54      1.00      0.71       141\n",
      "         1.0       0.00      0.00      0.00       118\n",
      "\n",
      "    accuracy                           0.54       259\n",
      "   macro avg       0.27      0.50      0.35       259\n",
      "weighted avg       0.30      0.54      0.38       259\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# 訓練資料的預測\n",
    "yhat_train = model.predict(train_X)\n",
    "yhat_train[yhat_train>=0.5] = 1\n",
    "yhat_train[yhat_train<0.5] = 0\n",
    "print('-------------訓練集-------------')\n",
    "# Confusion matrix\n",
    "mat = confusion_matrix(train_y, yhat_train)\n",
    "sns.heatmap(mat,square= True, annot=True, cbar= False)\n",
    "plt.xlabel(\"predicted value\")\n",
    "plt.ylabel(\"true value\")\n",
    "plt.savefig(f'./{stock_id}_LSTM(classification)/confusion_matrix_train_{features}.png')\n",
    "plt.show()\n",
    "\n",
    "# Accuracy\n",
    "accuracy = metrics.accuracy_score(train_y, yhat_train)\n",
    "print('Train accuracy:', accuracy)\n",
    "\n",
    "# precision, recall, f1-score\n",
    "print(\"report:\\n\",classification_report(train_y, yhat_train))\n",
    "\n",
    "\n",
    "# 驗證資料的績效\n",
    "yhat_valid = model.predict(valid_X)\n",
    "yhat_valid[yhat_valid>=0.5] = 1\n",
    "yhat_valid[yhat_valid<0.5] = 0\n",
    "print('-------------驗證集-------------')\n",
    "# Confusion matrix\n",
    "mat = confusion_matrix(valid_y, yhat_valid)\n",
    "sns.heatmap(mat,square= True, annot=True, cbar= False)\n",
    "plt.xlabel(\"predicted value\")\n",
    "plt.ylabel(\"true value\")\n",
    "plt.savefig(f'./{stock_id}_LSTM(classification)/confusion_matrix_valid_{features}.png')\n",
    "plt.show()\n",
    "\n",
    "# Accuracy\n",
    "accuracy = metrics.accuracy_score(valid_y, yhat_valid)\n",
    "print('Validation accuracy:', accuracy)\n",
    "\n",
    "# precision, recall, f1-score\n",
    "print(\"report:\\n\",classification_report(valid_y, yhat_valid))\n",
    "\n",
    "\n",
    "# 測試資料的績效\n",
    "yhat_test = model.predict(test_X)\n",
    "yhat_test[yhat_test>=0.5] = 1\n",
    "yhat_test[yhat_test<0.5] = 0\n",
    "print('-------------測試集-------------')\n",
    "# Confusion matrix\n",
    "mat = confusion_matrix(test_y, yhat_test)\n",
    "sns.heatmap(mat,square= True, annot=True, cbar= False)\n",
    "plt.xlabel(\"predicted value\")\n",
    "plt.ylabel(\"true value\")\n",
    "plt.savefig(f'./{stock_id}_LSTM(classification)/confusion_matrix_test_{features}.png')\n",
    "plt.show()\n",
    "\n",
    "# Accuracy\n",
    "accuracy = metrics.accuracy_score(test_y, yhat_test)\n",
    "print('Test accuracy:', accuracy)\n",
    "\n",
    "# precision, recall, f1-score\n",
    "print(\"report:\\n\",classification_report(test_y, yhat_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
